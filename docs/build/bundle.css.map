{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte",
    "..\\..\\Card.svelte",
    "..\\..\\Game.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n    import Game from \"./Game.svelte\";\r\n\r\n    let playing = false;\r\n    let numPlayers\r\n</script>\r\n\r\n{#if !playing}\r\n    <h1>Memory</h1>\r\n\r\n    <h2>Choose players</h2>\r\n\r\n    <div>\r\n        <button on:click={() => numPlayers = 1} class:selected={numPlayers === 1}>1</button>\r\n        <button on:click={() => numPlayers = 2} class:selected={numPlayers === 2}>2</button>\r\n        <button on:click={() => numPlayers = 3} class:selected={numPlayers === 3}>3</button>\r\n        <button on:click={() => numPlayers = 4} class:selected={numPlayers === 4}>4</button>\r\n    </div>\r\n\r\n    <button on:click={() => playing = true}>PLAY</button>\r\n{:else}\r\n    <Game {numPlayers}/>\r\n{/if}\r\n\r\n<style>\r\n    h1 {\r\n        font-size: 4rem;\r\n    }\r\n\r\n    h2 {\r\n        font-size: 2rem;\r\n    }\r\n\r\n    .selected {\r\n        background: #adadff;\r\n    }\r\n\r\n    button {\r\n        border-radius: 4px;\r\n        margin: 1rem 2rem;\r\n        padding: 1rem 2rem;\r\n        font-size: 4rem;\r\n    }\r\n</style>",
    "<style>\r\n    .container {\r\n        position: relative;\r\n        height: 100%;\r\n        width: 100%;\r\n        perspective: 600px;\r\n    }\r\n\r\n    .card {\r\n        position: absolute;\r\n        cursor: pointer;\r\n        width: 100%;\r\n        height: 100%;\r\n        border: 1px solid gray;\r\n        border-radius: 4px;\r\n        box-shadow: 0px 2px 1px -1px rgba(0, 0, 0, 0.2),0px 1px 1px 0px rgba(0, 0, 0, 0.14),0px 1px 3px 0px rgba(0,0,0,.12);\r\n    }\r\n\r\n    .card.front {\r\n        background-color: white;\r\n    }\r\n\r\n    .card.back {\r\n        background-color: lightblue;\r\n        color: #636363;\r\n        line-height: 21vmin;\r\n        font-size: 21vmin;\r\n        text-align: center;\r\n        vertical-align: center;\r\n    }\r\n</style>\r\n\r\n<script>\r\n    export let isFlipped = false\r\n\r\n    function turn(node, {\r\n        delay = 0,\r\n        duration = 500\r\n    }) {\r\n        return {\r\n            delay,\r\n            duration,\r\n            css: (t, u) => `transform: rotateY(${1 - (u * 180)}deg); opacity: ${1 - u};`\r\n        };\r\n    }\r\n</script>\r\n\r\n<div class=\"container\">\r\n    {#if isFlipped}\r\n    <div class=\"card front\" transition:turn>\r\n        <slot/>\r\n    </div>\r\n    {:else}\r\n    <div class=\"card back\" transition:turn>\r\n        <slot/>\r\n    </div>\r\n    {/if}\r\n</div>\r\n",
    "<script>\n\timport Dog from \"./icons/Dog.svelte\";\n\timport Card from \"./Card.svelte\";\n\timport Cat from \"./icons/Cat.svelte\";\n\timport Fish from \"./icons/Fish.svelte\";\n\timport Bird from \"./icons/Bird.svelte\";\n\timport Lion from \"./icons/Lion.svelte\";\n\timport Snake from \"./icons/Snake.svelte\";\n\timport Chicken from \"./icons/Chicken.svelte\";\n\timport Monkey from \"./icons/Monkey.svelte\";\n\timport {onDestroy, onMount} from \"svelte\";\n\n\t/* Randomize array in-place using Durstenfeld shuffle algorithm */\n\tfunction shuffleArray(array) {\n\t\tfor (let i = array.length - 1; i > 0; i--) {\n\t\t\tconst j = Math.floor(Math.random() * (i + 1));\n\t\t\tconst temp = array[i];\n\t\t\tarray[i] = array[j];\n\t\t\tarray[j] = temp;\n\t\t}\n\t}\n\n\texport let numPlayers=0\n\n\tlet curPlayer = 0\n\tlet scores = []\n\tfor (let i=0; i<numPlayers; i++) {\n\t\tscores.push(0)\n\t}\n\tlet waiting = false\n\tlet idx = 0\n\tlet board = []\n\tlet selected = []\n\n\tfunction reset() {\n\t\tboard = [\n\t\t\t{image: Dog, id: idx++},\n\t\t\t{image: Dog, id: idx++},\n\t\t\t{image: Cat, id: idx++},\n\t\t\t{image: Cat, id: idx++},\n\t\t\t{image: Fish, id: idx++},\n\t\t\t{image: Fish, id: idx++},\n\t\t\t{image: Bird, id: idx++},\n\t\t\t{image: Bird, id: idx++},\n\t\t\t{image: Lion, id: idx++},\n\t\t\t{image: Lion, id: idx++},\n\t\t\t{image: Snake, id: idx++},\n\t\t\t{image: Snake, id: idx++},\n\t\t\t{image: Monkey, id: idx++},\n\t\t\t{image: Monkey, id: idx++},\n\t\t\t{image: Chicken, id: idx++},\n\t\t\t{image: Chicken, id: idx++},\n\t\t]\n\t\tshuffleArray(board)\n\t\tselected = []\n\t\twaiting = false\n\t}\n\treset()\n\n\tfunction pick(card) {\n\t\tif (!board.find(c => !c.flipped)) {\n\t\t\treturn reset()\n\t\t}\n\t\tif (waiting) {\n\t\t\treturn next()\n\t\t}\n\t\tif (card.flipped) {\n\t\t\treturn\n\t\t}\n\t\tif (!board.find(c => !c.flipped)) {\n\t\t\treturn\n\t\t}\n\t\tcard.flipped = true\n\t\tselected = [...selected, card]\n\n\t\tif (selected.length === 2) {\n\t\t\tif (selected[0].image === selected[1].image) {\n\t\t\t\tscores[curPlayer] += 1\n\t\t\t\tscores = scores\n\t\t\t\tselected = []\n\t\t\t} else {\n\t\t\t\twaiting = true\n\t\t\t}\n\t\t}\n\n\t\tboard = board\n\t}\n\n\tfunction next() {\n\t\tcurPlayer += 1\n\t\tif (curPlayer >= numPlayers) {\n\t\t\tcurPlayer = 0\n\t\t}\n\t\twaiting = false\n\t\tselected.forEach(c => c.flipped = false)\n\t\tselected = []\n\t\tboard = board\n\t}\n\n\tconst letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n\n\tlet listener\n\tonMount(() => {\n\t\tlistener = window.addEventListener('keypress', e => {\n\t\t\tconst i = letters.findIndex(l => l === e.key.toUpperCase())\n\t\t\tpick(board[i])\n\t\t})\n\t})\n\n\tonDestroy(() => {\n\t\twindow.removeEventListener('keypress', listener)\n\t})\n</script>\n\n<main>\n\t{#each board as card, index}\n\t<a on:click={() => pick(card)}>\n\t\t<Card isFlipped={card.flipped}>\n\t\t\t{#if card.flipped}\n\t\t\t<svelte:component this={card.image}/>\n\t\t\t{:else}\n\t\t\t{letters[index]}\n\t\t\t{/if}\n\t\t</Card>\n\t</a>\n\t{/each}\n</main>\n\n<aside>Player {curPlayer+1} - Score: {scores[curPlayer]}</aside>\n\n<footer>\n\tIcons made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a>\n</footer>\n\n<style>\n\tmain {\n\t\theight: 100%;\n\t\tdisplay: flex;\n\t\tflex-wrap: wrap;\n\t\talign-content: center;\n\t\tjustify-content: center;\n\t}\n\n\ta {\n\t\twidth: 23vmin;\n\t\theight: 23vmin;\n\t\tmargin-right: 1rem;\n\t\tmargin-bottom: 1rem;\n\t}\n\n\taside {\n\t\tposition: fixed;\n\t\tright: 10px;\n\t\tbottom: 10px;\n\t}\n\n\tfooter {\n\t\tmargin-top: -1rem;\n\t}\n\n\th1 {\n\t\tcolor: #ff3e00;\n\t\ttext-transform: uppercase;\n\t\tfont-size: 4em;\n\t\tfont-weight: 100;\n\t}\n</style>\n"
  ],
  "names": [],
  "mappings": "AAyBI,EAAE,eAAC,CAAC,AACA,SAAS,CAAE,IAAI,AACnB,CAAC,AAED,EAAE,eAAC,CAAC,AACA,SAAS,CAAE,IAAI,AACnB,CAAC,AAED,SAAS,eAAC,CAAC,AACP,UAAU,CAAE,OAAO,AACvB,CAAC,AAED,MAAM,eAAC,CAAC,AACJ,aAAa,CAAE,GAAG,CAClB,MAAM,CAAE,IAAI,CAAC,IAAI,CACjB,OAAO,CAAE,IAAI,CAAC,IAAI,CAClB,SAAS,CAAE,IAAI,AACnB,CAAC;ACzCD,UAAU,cAAC,CAAC,AACR,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,WAAW,CAAE,KAAK,AACtB,CAAC,AAED,KAAK,cAAC,CAAC,AACH,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,OAAO,CACf,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,AACvH,CAAC,AAED,KAAK,MAAM,cAAC,CAAC,AACT,gBAAgB,CAAE,KAAK,AAC3B,CAAC,AAED,KAAK,KAAK,cAAC,CAAC,AACR,gBAAgB,CAAE,SAAS,CAC3B,KAAK,CAAE,OAAO,CACd,WAAW,CAAE,MAAM,CACnB,SAAS,CAAE,MAAM,CACjB,UAAU,CAAE,MAAM,CAClB,cAAc,CAAE,MAAM,AAC1B,CAAC;AC0GJ,IAAI,cAAC,CAAC,AACL,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,CACf,aAAa,CAAE,MAAM,CACrB,eAAe,CAAE,MAAM,AACxB,CAAC,AAED,CAAC,cAAC,CAAC,AACF,KAAK,CAAE,MAAM,CACb,MAAM,CAAE,MAAM,CACd,YAAY,CAAE,IAAI,CAClB,aAAa,CAAE,IAAI,AACpB,CAAC,AAED,KAAK,cAAC,CAAC,AACN,QAAQ,CAAE,KAAK,CACf,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACb,CAAC,AAED,MAAM,cAAC,CAAC,AACP,UAAU,CAAE,KAAK,AAClB,CAAC"
}